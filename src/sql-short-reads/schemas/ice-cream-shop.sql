/*
https://sqlshortreads.com/sql-practice-problems/

The tables below are taken from the link above; these are the tables
used in these exercises.
*/

-- Set seed value so that the same data is generated each execution.
EXEC DBMS_RANDOM.SEED(42);

-- Create the job table.
CREATE TABLE job (
    job_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1001 INCREMENT BY 1),
    title VARCHAR(25),
    CONSTRAINT pk_job_id PRIMARY KEY (job_id),
    CONSTRAINT unique_title UNIQUE (title)
);

-- Manually insert three jobs into the job table.
INSERT INTO job (title)
    VALUES ('Manager');

INSERT INTO job (title)
    VALUES ('Assistant Manager');

INSERT INTO job (title)
    VALUES ('Salesperson');

-- Create the employee table.
CREATE TABLE employee (
    employee_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1 INCREMENT BY 1),
    last_name VARCHAR2(25 CHAR) NOT NULL,
    first_name VARCHAR2(25 CHAR) NOT NULL,
    m_initial VARCHAR2(1 CHAR),
    email_address VARCHAR2(100 CHAR),
    phone_number VARCHAR(10 CHAR) NOT NULL,
    hire_date DATE NOT NULL,
    job_id INTEGER,
    salary NUMBER(9, 2) NOT NULL,
    manager_id INTEGER,
    CONSTRAINT pk_employee_id PRIMARY KEY (employee_id),
    CONSTRAINT unique_email_address UNIQUE (email_address),
    CONSTRAINT fk_job_id FOREIGN KEY (job_id) REFERENCES job (job_id),
    CONSTRAINT fk_manager_id FOREIGN KEY (manager_id) REFERENCES employee (employee_id)
);

-- Manually insert ten employees into the employee table and subsequently update the email address values.
INSERT INTO employee (last_name, first_name, m_initial, phone_number, hire_date, job_id, salary, manager_id)
    VALUES ('Cooley', 'Sonia', 'U', '3933771860', '01-DEC-23', 1001, 60000, NULL);

INSERT INTO employee (last_name, first_name, m_initial, phone_number, hire_date, job_id, salary, manager_id)
    VALUES ('Edwards', 'Jason', 'X', '3933654321', '15-DEC-23', 1002, 45000, 1);

INSERT INTO employee (last_name, first_name, m_initial, phone_number, hire_date, job_id, salary, manager_id)
    VALUES ('Williams', 'Kelly', 'D', '8120930131', '15-DEC-23', 1002, 45000, 1);

INSERT INTO employee (last_name, first_name, m_initial, phone_number, hire_date, job_id, salary, manager_id)
    VALUES ('Powers', 'Darren', 'O', '1529966817', '15-DEC-23', 1003, 34290, 2);

INSERT INTO employee (last_name, first_name, m_initial, phone_number, hire_date, job_id, salary, manager_id)
    VALUES ('Brockman', 'Tim', 'O', '1848710906', '15-DEC-23', 1003, 35172, 2);

INSERT INTO employee (last_name, first_name, m_initial, phone_number, hire_date, job_id, salary, manager_id)
    VALUES ('Knutson', 'Paul', 'G', '1643247391', '01-FEB-24', 1003, 34376, 2);

INSERT INTO employee (last_name, first_name, m_initial, phone_number, hire_date, job_id, salary, manager_id)
    VALUES ('Karlsson', 'Jim', 'K', '9049122048', '01-FEB-24', 1003, 33762, 2);

INSERT INTO employee (last_name, first_name, m_initial, phone_number, hire_date, job_id, salary, manager_id)
    VALUES ('Engle', 'Harold', 'H', '7825126549', '01-MAR-24', 1003, 33769, 3);

INSERT INTO employee (last_name, first_name, m_initial, phone_number, hire_date, job_id, salary, manager_id)
    VALUES ('Epp', 'Jim', 'M', '5992200737', '01-MAR-24', 1003, 33381, 3);

INSERT INTO employee (last_name, first_name, m_initial, phone_number, hire_date, job_id, salary, manager_id)
    VALUES ('Butterfield', 'Ted', 'H', '9677630299', '01-MAR-24', 1003, 32305, 3);

UPDATE
    employee
SET
    employee.email_address = (
        employee.first_name
        || '.'
        || employee.last_name
        || ROWNUM
        || '@sqlshortreads.com'
    );

-- Create the product table.
CREATE TABLE product (
    product_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1 INCREMENT BY 1),
    description VARCHAR2(50 CHAR) NOT NULL,
    price NUMBER(4, 2) NOT NULL,
    CONSTRAINT pk_product_id PRIMARY KEY (product_id),
    CONSTRAINT product_price_valid CHECK (price >= 0)
);

-- Manually insert eight products into the product table.
INSERT INTO product (description, price)
         VALUES ('Vanilla', 2);

INSERT INTO product (description, price)
         VALUES ('Chocolate', 2);

INSERT INTO product (description, price)
         VALUES ('Cookies N'' Cream', 3);

INSERT INTO product (description, price)
         VALUES ('Mint Chocolate Chip', 3);

INSERT INTO product (description, price)
         VALUES ('Chocolate Chip Cookie Dough', 3.5);

INSERT INTO product (description, price)
         VALUES ('Buttered Pecan', 3.5);

INSERT INTO product (description, price)
         VALUES ('Cookie Dough', 3.5);

INSERT INTO product (description, price)
         VALUES ('Strawberry', 2);

-- Create the member_type table.
CREATE TABLE member_type (
    member_type_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1 INCREMENT BY 1),
    description VARCHAR2(10 CHAR) NOT NULL,
    annual_cost NUMBER(4, 2) NOT NULL,
    discount NUMBER(3,2) NOT NULL,
    CONSTRAINT pk_member_type_id PRIMARY KEY (member_type_id)
);

-- Manually insert five member types into the member_type table.
INSERT INTO member_type (description, annual_cost, discount)
         VALUES ('Free', 0.00, 0.00);

INSERT INTO member_type (description, annual_cost, discount)
         VALUES ('Bronze', 15.00, 0.03);

INSERT INTO member_type (description, annual_cost, discount)
         VALUES ('Silver', 20.00, 0.05);

INSERT INTO member_type (description, annual_cost, discount)
         VALUES ('Gold', 25.00, 0.07);

INSERT INTO member_type (description, annual_cost, discount)
         VALUES ('Platinum', 30.00, 0.10);

-- Create the member table.
CREATE TABLE member (
    member_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1 INCREMENT BY 1),
    member_type_id INTEGER,
    enrollment_date DATE NOT NULL,
    email_address CHAR(22 CHARACTER),
    employee_id INTEGER,
    CONSTRAINT pk_member_id PRIMARY KEY (member_id),
    CONSTRAINT fk_member_type_id FOREIGN KEY (member_type_id) REFERENCES member_type (member_type_id),
    CONSTRAINT fk_employee_id FOREIGN KEY (employee_id) REFERENCES employee (employee_id)
);

-- Manually insert 100 members into the members table.
INSERT INTO member (member_id, member_type_id, enrollment_date, email_address, employee_id)
    WITH member_insertion (increment_value, member_type_id, enrollment_date, email_address) AS (
        SELECT
            1 AS increment_value,
            FLOOR(DBMS_RANDOM.VALUE(1, 6)) AS member_type_id,
            TO_DATE('01-JAN-24', 'DD-MON-RR') + FLOOR(DBMS_RANDOM.VALUE(0, 91)) AS enrollment_date,
            DBMS_RANDOM.STRING('X', 10) || '@example.com' AS email_address
        FROM
            dual
        UNION ALL
        SELECT
            member_insertion.increment_value + 1,
            FLOOR(DBMS_RANDOM.VALUE(1, 6)),
            TO_DATE('01-JAN-24', 'DD-MON-RR') + FLOOR(DBMS_RANDOM.VALUE(0, 91)),
            DBMS_RANDOM.STRING('X', 10) || '@example.com'
        FROM
            member_insertion
        WHERE
            member_insertion.increment_value < 100
    )
    SELECT
        ROW_NUMBER() OVER (
            ORDER BY member_insertion.enrollment_date
        ) AS member_id,
        member_insertion.member_type_id,
        member_insertion.enrollment_date,
        member_insertion.email_address,
        (
            SELECT
                FLOOR(
                    DBMS_RANDOM.VALUE(
                        MIN(employee.employee_id),
                        MAX(employee.employee_id) + 1
                    )
                )
            FROM
                employee
            WHERE
                employee.hire_date <= member_insertion.enrollment_date
        ) AS employee_id
    FROM
        member_insertion;

-- Create the purchase table.
CREATE TABLE purchase (
    purchase_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1 INCREMENT BY 1),
    member_id INTEGER NOT NULL,
    purchase_date DATE NOT NULL,
    employee_id INTEGER NOT NULL,
    purchase_total NUMBER(6, 2),
    CONSTRAINT pk_purchase_id PRIMARY KEY (purchase_id),
    CONSTRAINT fk_member_id FOREIGN KEY (member_id) REFERENCES member (member_id),
    CONSTRAINT fk_purchase_employee_id FOREIGN KEY (employee_id) REFERENCES employee (employee_id)
);

-- Manually insert member purchases into the purchase table. Each member will have at least one purchase.
INSERT INTO purchase (purchase_id, member_id, purchase_date, employee_id)
    WITH initial_purchase (member_id) AS (
        SELECT
            1 AS member_id
        FROM
            dual
        UNION ALL
        SELECT
            member_id + 1
        FROM
            initial_purchase
        WHERE
            initial_purchase.member_id < (
                SELECT
                    COUNT(member.member_id)
                FROM
                    member
            )
    ),
    additional_purchase (increment_value, member_id) AS (
        SELECT
            1 AS increment_value,
            FLOOR(
                DBMS_RANDOM.VALUE(
                    (SELECT MIN(member.member_id) FROM member),
                    (SELECT MAX(member.member_id) + 1 FROM member)
                )
            ) AS member_id
        FROM
            dual
        UNION ALL
        SELECT
            increment_value + 1,
            FLOOR(
                DBMS_RANDOM.VALUE(
                    (SELECT MIN(member.member_id) FROM member),
                    (SELECT MAX(member.member_id) + 1 FROM member)
                )
            ) AS member_id
        FROM
            additional_purchase
        WHERE
            additional_purchase.increment_value < (
                SELECT
                    COUNT(member.member_id)
                FROM
                    member
            )
    ),
    purchase_insertion (purchase_id, member_id, purchase_date, employee_id) AS (
        SELECT
            ROW_NUMBER() OVER (
                ORDER BY combined_insertion.purchase_date
            ) AS purchase_id,
            combined_insertion.member_id,
            combined_insertion.purchase_date,
            (
                SELECT
                    FLOOR(
                        DBMS_RANDOM.VALUE(
                            MIN(employee.employee_id),
                            MAX(employee.employee_id) + 1
                        )
                    )
                FROM
                    employee
                WHERE
                    employee.hire_date <= combined_insertion.purchase_date
            ) AS employee_id
        FROM (
            SELECT
                initial_purchase.member_id,
                member.enrollment_date AS purchase_date
            FROM
                initial_purchase
                INNER JOIN
                member
                    ON initial_purchase.member_id = member.member_id
            UNION ALL
            SELECT
                additional_purchase.member_id,
                TO_DATE('01-JAN-24', 'DD-MON-RR')
                + FLOOR(
                    DBMS_RANDOM.VALUE(
                        (SELECT
                            CAST(TO_CHAR(member.enrollment_date, 'DDD') AS INTEGER)
                        FROM
                            member
                        WHERE
                            member.member_id = additional_purchase.member_id),
                        91
                    )
                ) AS purchase_date
            FROM
                additional_purchase
        ) combined_insertion
    )
    SELECT
        purchase_insertion.purchase_id,
        purchase_insertion.member_id,
        purchase_insertion.purchase_date,
        purchase_insertion.employee_id
    FROM
        purchase_insertion;

-- Create the purchase_item table.
CREATE TABLE purchase_item (
    purchase_id INTEGER,
    purchase_item_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1 INCREMENT BY 1),
    product_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    item_total NUMBER(6, 2) NOT NULL,
    CONSTRAINT pk_purchase_id_item_id PRIMARY KEY (purchase_id, purchase_item_id),
    CONSTRAINT fk_purchase_id FOREIGN KEY (purchase_id) REFERENCES purchase (purchase_id),
    CONSTRAINT fk_product_id FOREIGN KEY (product_id) REFERENCES product (product_id),
    CONSTRAINT quantity_valid CHECK (quantity > 0)
);

-- Manually insert purchase_item data into the purchase_item table. Each purchase will have at least one purchase item.
INSERT INTO purchase_item (purchase_id, purchase_item_id, product_id, quantity, item_total)
    WITH initial_purchase_item (purchase_id, product_id, quantity) AS (
        SELECT
            1 AS purchase_id,
            FLOOR(
                DBMS_RANDOM.VALUE(
                    (SELECT MIN(product.product_id) FROM product),
                    (SELECT MAX(product.product_id) FROM product) + 1
                )
            ) AS product_id,
            FLOOR(DBMS_RANDOM.VALUE(1, 5)) AS quantity
        FROM
            dual
        UNION ALL
        SELECT
            initial_purchase_item.purchase_id + 1,
            FLOOR(
                DBMS_RANDOM.VALUE(
                    (SELECT MIN(product.product_id) FROM product),
                    (SELECT MAX(product.product_id) FROM product) + 1
                )
            ),
            FLOOR(DBMS_RANDOM.VALUE(1, 5))
        FROM
            initial_purchase_item
        WHERE
            initial_purchase_item.purchase_id < (
                SELECT
                    COUNT(purchase.purchase_id)
                FROM
                    purchase
            )
    ),
    additional_purchase_item (increment_value, purchase_id, product_id, quantity) AS (
        SELECT
            1 AS increment_value,
            FLOOR(DBMS_RANDOM.VALUE(
                    (SELECT MIN(purchase.purchase_id) FROM purchase),
                    (SELECT MAX(purchase.purchase_id) FROM purchase) + 1
                )
            ) AS purchase_id,
            FLOOR(
                DBMS_RANDOM.VALUE(
                    (SELECT MIN(product.product_id) FROM product),
                    (SELECT MAX(product.product_id) FROM product) + 1
                )
            ) AS product_id,
            FLOOR(DBMS_RANDOM.VALUE(1, 5)) AS quantity
        FROM
            dual
        UNION ALL
        SELECT
            additional_purchase_item.increment_value + 1,
            FLOOR(DBMS_RANDOM.VALUE(
                    (SELECT MIN(purchase.purchase_id) FROM purchase),
                    (SELECT MAX(purchase.purchase_id) FROM purchase) + 1
                )
            ),
            FLOOR(
                DBMS_RANDOM.VALUE(
                    (SELECT MIN(product.product_id) FROM product),
                    (SELECT MAX(product.product_id) FROM product) + 1
                )
            ),
            FLOOR(DBMS_RANDOM.VALUE(1, 5))
        FROM
            additional_purchase_item
        WHERE
            additional_purchase_item.increment_value < (
                SELECT
                    COUNT(purchase.purchase_id)
                FROM
                    purchase
            )
    ),
    purchase_item_insertion (purchase_id, purchase_item_id, product_id, quantity, item_total) AS (
        SELECT
            combined_insertion.purchase_id,
            ROW_NUMBER() OVER (
                PARTITION BY combined_insertion.purchase_id
                ORDER BY (SELECT 1 FROM dual)
            ) AS purchase_item_id,
            combined_insertion.product_id,
            SUM(quantity) AS quantity,
            (1 - MIN(member_type.discount)) * (SUM(combined_insertion.quantity) * MIN(product.price)) AS item_total
        FROM (
            SELECT
                initial_purchase_item.purchase_id,
                initial_purchase_item.product_id,
                initial_purchase_item.quantity
            FROM
                initial_purchase_item
            UNION ALL
            SELECT
                additional_purchase_item.purchase_id,
                additional_purchase_item.product_id,
                additional_purchase_item.quantity
            FROM
                additional_purchase_item
        ) combined_insertion
            INNER JOIN
            purchase
                ON combined_insertion.purchase_id = purchase.purchase_id
            INNER JOIN
            member
                ON purchase.member_id = member.member_id
            INNER JOIN
            member_type
                ON member.member_type_id = member_type.member_type_id
            LEFT JOIN
            product
                ON combined_insertion.product_id = product.product_id
        GROUP BY
            combined_insertion.purchase_id,
            combined_insertion.product_id
    )
    SELECT
        purchase_item_insertion.purchase_id,
        purchase_item_insertion.purchase_item_id,
        purchase_item_insertion.product_id,
        purchase_item_insertion.quantity,
        purchase_item_insertion.item_total
    FROM
        purchase_item_insertion;

-- Update the purchase_total attribute to reflect the sum of each purchase's corresponding purchase items.
UPDATE
    purchase
SET
    purchase.purchase_total = (
        SELECT
            SUM(purchase_item.item_total)
        FROM
            purchase_item
        WHERE
            purchase_item.purchase_id = purchase.purchase_id
    );

-- Update the purchase_total attribute when an item_total is updated, a new purchase_item is added to a purchase, or an existing purchase_item is removed from a purchase.
CREATE OR REPLACE TRIGGER update_purchase_total
    AFTER INSERT OR UPDATE OR DELETE ON purchase_item
    BEGIN
        UPDATE
            purchase
        SET
            purchase.purchase_total = (
                SELECT
                    SUM(purchase_item.item_total)
                FROM
                    purchase_item
                WHERE
                    purchase_item.purchase_id = purchase.purchase_id
            );
    END;
